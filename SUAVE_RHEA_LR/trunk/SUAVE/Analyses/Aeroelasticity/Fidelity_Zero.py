## @ingroup Analyses-Aeroelasticity
# Fidelity_Zero.py
#
# Created:  
# Modified: Jul 2020, S. Karpuk

# ----------------------------------------------------------------------
#  Imports
# ----------------------------------------------------------------------

import SUAVE
from SUAVE.Core import Data
from .Aeroelasticity import Aeroelasticity
import numpy as np

# the aeroelsticity methods
from SUAVE.Methods.Aeroelasticity.Fidelity_Zero import NASA_Flutter as Methods


# ----------------------------------------------------------------------
#  Analysis
# ----------------------------------------------------------------------
## @ingroup Analyses-Aeroelasticity
class Fidelity_Zero(Aeroelasticity):
    """This is an analysis based on a semi-empirical NASA model.

    Assumptions:
        straignt leading-edge, straignt trailing-edge wing

    Source:
        NASA TM 110276 'An interactive Software for Conceptual Wing Flutter Analysis and Parameteric Study'
    """       
    def __defaults__(self):
        """This sets the default values and methods for the analysis.

        Assumptions:
        None

        Source:
        N/A

        Inputs:
        None

        Outputs:
        None

        Properties Used:
        N/A
        """          
        self.tag    = 'fidelity_zero_markup'
        
        self.R_low_lim = np.array ([[0,	0.0107],[0.025,	0.06175],[0.05,	0.1128],[0.075,	0.16385],[0.1,	0.2149],[0.125,	0.26595],[0.15,	0.317],
                                    [0.175,	0.36805],[0.2,	0.4191],[0.225,	0.47015],[0.25,	0.5212],[0.275,	0.57225],[0.3,	0.6233],[0.325,	0.67435],
                                    [0.35,	0.7254],[0.375,	0.77645],[0.4,	0.8275],[0.425,	0.87855],[0.45,	0.9296],[0.475,	0.98065],[0.5,	1.0317],
                                    [0.525,	1.08275],[0.55,	1.1338],[0.575,	1.18485],[0.6,	1.2359],[0.625,	1.28695],[0.65,	1.338],[0.675,	1.38905],
                                    [0.7,	1.4401],[0.725,	1.49115],[0.75,	1.5422],[0.775,	1.59325],[0.8,	1.6443],[0.825,	1.69535],[0.85,	1.7464],
                                    [0.875,	1.79745],[0.9,	1.91314],[0.925,	1.946955],[0.95,	1.98077],[0.975,	2.014585],[1,	    2.0484],[1.025,	2.082215],
                                    [1.05,	2.11603],[1.075,	2.149845],[1.1,	2.18366],[1.125,	2.217475],[1.15,	2.25129],[1.175,	2.285105],[1.2,	2.31892],
                                    [1.225,	2.352735],[1.25,	2.38655],[1.275,	2.420365],[1.3,	2.45418],[1.325,	2.487995],[1.35,	2.52181],[1.375,	2.555625],
                                    [1.4,	2.58944],[1.425,	2.623255],[1.45,	2.65707],[1.475,	2.690885],[1.5,	2.68675],[1.525,	2.6902275],[1.55,	2.693705],
                                    [1.575,	2.6971825],[1.6,	2.70066],[1.625,	2.7041375],[1.65,	2.707615],[1.675,	2.7110925],[1.7,	2.71457],[1.725,	2.7180475],
                                    [1.75,	2.721525],[1.775,	2.7250025],[1.8,	2.72848],[1.825,	2.7319575],[1.85,	2.735435],[1.875,	2.7389125],[1.9,	2.74239],
                                    [1.925,	2.7458675],[1.95,	2.749345],[1.975,	2.7528225],[2,	2.7563]])

        self.F_low_lim = np.array([[0,	0.5916],[0.025,	0.5886175],[0.05,	0.585635],[0.075,	0.5826525],[0.1,	    0.57967],[0.125,	0.5766875],[0.15,	0.573705],
                                    [0.175,	0.5707225],[0.2,	    0.56774],[0.225,	0.5647575],[0.25,	0.561775],[0.275,	0.5587925],[0.3,	    0.55581],[0.325,	0.5528275],
                                    [0.35,	0.549845],[0.375,	0.5468625],[0.4,	    0.54388],[0.425,	0.5408975],[0.45,	0.537915],[0.475,	0.5349325],[0.5,	    0.53195],
                                    [0.525,	0.5289675],[0.55,	0.525985],[0.575,	0.5230025],[0.6,	    0.52002],[0.625,	0.5170375],[0.65,	0.514055],[0.675,	0.5110725],
                                    [0.7,	    0.50809],[0.725,	0.5051075],[0.75,	0.502125],[0.775,	0.4991425],[0.8,	    0.49616],[0.825,	0.4931775],[0.85,	0.490195],
                                    [0.875,	0.4872125],[0.9,	    0.48423],[0.925,	0.4812475],[0.95,	0.48498],[0.975,	0.48734],[1,	    0.4897],[1.025,	0.49206],
                                    [1.05,	0.49442],[1.075,	0.49678],[1.1,	    0.49914],[1.125,	0.5015],[1.15,	0.50386],[1.175,	0.50622],[1.2,	    0.50858],
                                    [1.225,	0.51094],[1.25,	0.5133],[1.275,	0.51566],[1.3,	    0.51802],[1.325,	0.52038],[1.35,	0.52274],[1.375,	0.5251],
                                    [1.4,	    0.52746],[1.425,	0.52982],[1.45,	0.53218],[1.475,	0.53633],[1.5,	    0.5441],[1.525,	0.55187],[1.55,	0.55964],
                                    [1.575,	0.56741],[1.6,	    0.57518],[1.625,	0.58295],[1.65,	0.59072],[1.675,	0.59849],[1.7,	    0.60626],[1.725,	0.61403],
                                    [1.75,	0.6218],[1.775,	0.62957],[1.8,	0.63734],[1.825,	0.64511],[1.85,	0.65288],[1.875,	0.66065],[1.9,	    0.66842],
                                    [1.925,	0.67619],[1.95,	0.68396],[1.975,	0.69173],[2,	    0.6995]])



   
        
    def evaluate(self):
        """Calculate the flutter speed based on geometric inputs

        Assumptions:
        None

        Source:
        N/A

        Inputs:
        None

        Outputs:
        results

        """

        # unpack
        vehicle  = self.vehicle

        limit_criteria = Data()
        limit_criteria.F_low_lim = self.F_low_lim
        limit_criteria.R_low_lim = self.R_low_lim

        # Calculate flutter speed
        results = Methods.calculate_flutter_speed(limit_criteria,vehicle)
        
        return results
